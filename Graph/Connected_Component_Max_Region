static int connectedCell(int[][] matrix) {

        int[][] visited = new int[matrix.length][matrix[0].length];
        int result = 0;
        for (int i = 0; i < matrix.length ; i++) {
            for (int j = 0; j < matrix[0].length ; j++) { 
                if (matrix[i][j] == 1 && visited[i][j] == 0) {
                    visited[i][j] = 1;
                    int current_result = DFS(i, j, matrix);
                    result = Math.max(current_result, result);
                } else {
                    visited[i][j] = 1;
                }             
            }
        }
        return result;
    }
    
    static int DFS(int i, int j, int[][] matrix) {
        if (i < 0 || i >= matrix.length || j < 0 || j >= matrix[0].length) {
            return 0;
        }
        if (matrix[i][j] == 0) {
            return 0;
        }
        matrix[i][j] = 0;
        int result = 1;
        for (int r = i-1; r <= i+1; r++) {
            for (int c = j-1; c <= j+1; c++) {
                if (r != i || c != j) {
                    result += DFS(r, c, matrix);    
                }                
            }
        }
        return result;
    }
    
    
    //************************    Using visited in DFS -    ***************************************************
   
    
    static int connectedCell(int[][] matrix) {

        int[][] visited = new int[matrix.length][matrix[0].length];
        int result = 0;
        for (int i = 0; i < matrix.length ; i++) {
            for (int j = 0; j < matrix[0].length ; j++) { 
                if (matrix[i][j] == 1 && visited[i][j] == 0) {
                    int current_result = DFS(i, j, matrix, visited);
                    visited[i][j] = 1;
                    result = Math.max(current_result, result);
                } else {
                    visited[i][j] = 1;
                }             
            }
        }
        return result;
    }
    
    static int DFS(int i, int j, int[][] matrix, int[][] visited) {
        if (i < 0 || i >= matrix.length || j < 0 || j >= matrix[0].length) {
            return 0;
        }
        if (visited[i][j] == 1) {
            return 0;
        }
        int result = 0;
        if (matrix[i][j] == 1) {
            visited[i][j] = 1;
            result = 1;
            for (int r = i-1; r <= i+1; r++) {
                for (int c = j-1; c <= j+1; c++) {
                    if (r != i || c != j) {
                        result += DFS(r, c, matrix, visited);    
                    }                
                }
            }            
        }
        return result;
    }
